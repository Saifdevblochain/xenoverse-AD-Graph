// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CommitteeVote extends ethereum.Event {
  get params(): CommitteeVote__Params {
    return new CommitteeVote__Params(this);
  }
}

export class CommitteeVote__Params {
  _event: CommitteeVote;

  constructor(event: CommitteeVote) {
    this._event = event;
  }

  get committeeMember(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get decision(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get _NFT(): CommitteeVote_NFTStruct {
    return changetype<CommitteeVote_NFTStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class CommitteeVote_NFTStruct extends ethereum.Tuple {
  get uri(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get approvedVotes(): BigInt {
    return this[2].toBigInt();
  }

  get rejectedVotes(): BigInt {
    return this[3].toBigInt();
  }

  get isApprovedByCommittee(): boolean {
    return this[4].toBoolean();
  }

  get rejected(): boolean {
    return this[5].toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NftAdded extends ethereum.Event {
  get params(): NftAdded__Params {
    return new NftAdded__Params(this);
  }
}

export class NftAdded__Params {
  _event: NftAdded;

  constructor(event: NftAdded) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get NFT(): NftAddedNFTStruct {
    return changetype<NftAddedNFTStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get uploadTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NftAddedNFTStruct extends ethereum.Tuple {
  get uri(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get approvedVotes(): BigInt {
    return this[2].toBigInt();
  }

  get rejectedVotes(): BigInt {
    return this[3].toBigInt();
  }

  get isApprovedByCommittee(): boolean {
    return this[4].toBoolean();
  }

  get rejected(): boolean {
    return this[5].toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DaoCommittee__nftStoreResult {
  value0: string;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;
  value5: boolean;

  constructor(
    value0: string,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getUri(): string {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }

  getApprovedVotes(): BigInt {
    return this.value2;
  }

  getRejectedVotes(): BigInt {
    return this.value3;
  }

  getIsApprovedByCommittee(): boolean {
    return this.value4;
  }

  getRejected(): boolean {
    return this.value5;
  }
}

export class DaoCommittee extends ethereum.SmartContract {
  static bind(address: Address): DaoCommittee {
    return new DaoCommittee("DaoCommittee", address);
  }

  Committee(param0: Address): boolean {
    let result = super.call("Committee", "Committee(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_Committee(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("Committee", "Committee(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  DaoPublic(): Address {
    let result = super.call("DaoPublic", "DaoPublic():(address)", []);

    return result[0].toAddress();
  }

  try_DaoPublic(): ethereum.CallResult<Address> {
    let result = super.tryCall("DaoPublic", "DaoPublic():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  committeeMembersCounter(): BigInt {
    let result = super.call(
      "committeeMembersCounter",
      "committeeMembersCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_committeeMembersCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "committeeMembersCounter",
      "committeeMembersCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  committeeVoteCheck(param0: BigInt, param1: Address): i32 {
    let result = super.call(
      "committeeVoteCheck",
      "committeeVoteCheck(uint256,address):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toI32();
  }

  try_committeeVoteCheck(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "committeeVoteCheck",
      "committeeVoteCheck(uint256,address):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  nftStore(param0: BigInt): DaoCommittee__nftStoreResult {
    let result = super.call(
      "nftStore",
      "nftStore(uint256):(string,address,uint256,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DaoCommittee__nftStoreResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBoolean()
    );
  }

  try_nftStore(
    param0: BigInt
  ): ethereum.CallResult<DaoCommittee__nftStoreResult> {
    let result = super.tryCall(
      "nftStore",
      "nftStore(uint256):(string,address,uint256,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DaoCommittee__nftStoreResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBoolean()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddNftsCall extends ethereum.Call {
  get inputs(): AddNftsCall__Inputs {
    return new AddNftsCall__Inputs(this);
  }

  get outputs(): AddNftsCall__Outputs {
    return new AddNftsCall__Outputs(this);
  }
}

export class AddNftsCall__Inputs {
  _call: AddNftsCall;

  constructor(call: AddNftsCall) {
    this._call = call;
  }

  get uri_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddNftsCall__Outputs {
  _call: AddNftsCall;

  constructor(call: AddNftsCall) {
    this._call = call;
  }
}

export class AddRemoveCommitteeMemberCall extends ethereum.Call {
  get inputs(): AddRemoveCommitteeMemberCall__Inputs {
    return new AddRemoveCommitteeMemberCall__Inputs(this);
  }

  get outputs(): AddRemoveCommitteeMemberCall__Outputs {
    return new AddRemoveCommitteeMemberCall__Outputs(this);
  }
}

export class AddRemoveCommitteeMemberCall__Inputs {
  _call: AddRemoveCommitteeMemberCall;

  constructor(call: AddRemoveCommitteeMemberCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddRemoveCommitteeMemberCall__Outputs {
  _call: AddRemoveCommitteeMemberCall;

  constructor(call: AddRemoveCommitteeMemberCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateDaoPublicAddressCall extends ethereum.Call {
  get inputs(): UpdateDaoPublicAddressCall__Inputs {
    return new UpdateDaoPublicAddressCall__Inputs(this);
  }

  get outputs(): UpdateDaoPublicAddressCall__Outputs {
    return new UpdateDaoPublicAddressCall__Outputs(this);
  }
}

export class UpdateDaoPublicAddressCall__Inputs {
  _call: UpdateDaoPublicAddressCall;

  constructor(call: UpdateDaoPublicAddressCall) {
    this._call = call;
  }

  get _newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateDaoPublicAddressCall__Outputs {
  _call: UpdateDaoPublicAddressCall;

  constructor(call: UpdateDaoPublicAddressCall) {
    this._call = call;
  }
}

export class VoteByCommitteeCall extends ethereum.Call {
  get inputs(): VoteByCommitteeCall__Inputs {
    return new VoteByCommitteeCall__Inputs(this);
  }

  get outputs(): VoteByCommitteeCall__Outputs {
    return new VoteByCommitteeCall__Outputs(this);
  }
}

export class VoteByCommitteeCall__Inputs {
  _call: VoteByCommitteeCall;

  constructor(call: VoteByCommitteeCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get decision(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class VoteByCommitteeCall__Outputs {
  _call: VoteByCommitteeCall;

  constructor(call: VoteByCommitteeCall) {
    this._call = call;
  }
}
