// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DaoPublicInitialized extends ethereum.Event {
  get params(): DaoPublicInitialized__Params {
    return new DaoPublicInitialized__Params(this);
  }
}

export class DaoPublicInitialized__Params {
  _event: DaoPublicInitialized;

  constructor(event: DaoPublicInitialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NftApproved extends ethereum.Event {
  get params(): NftApproved__Params {
    return new NftApproved__Params(this);
  }
}

export class NftApproved__Params {
  _event: NftApproved;

  constructor(event: NftApproved) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _NFT(): NftApproved_NFTStruct {
    return changetype<NftApproved_NFTStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get startTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NftApproved_NFTStruct extends ethereum.Tuple {
  get uri(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get votes(): BigInt {
    return this[3].toBigInt();
  }

  get winTime(): BigInt {
    return this[4].toBigInt();
  }

  get votersCount(): BigInt {
    return this[5].toBigInt();
  }

  get favourVotes(): BigInt {
    return this[6].toBigInt();
  }

  get disApprovedVotes(): BigInt {
    return this[7].toBigInt();
  }

  get isApprovedByCommittee(): boolean {
    return this[8].toBoolean();
  }

  get winnerStatus(): boolean {
    return this[9].toBoolean();
  }

  get isBlackListed(): boolean {
    return this[10].toBoolean();
  }
}

export class DaoPublicOwnershipTransferred extends ethereum.Event {
  get params(): DaoPublicOwnershipTransferred__Params {
    return new DaoPublicOwnershipTransferred__Params(this);
  }
}

export class DaoPublicOwnershipTransferred__Params {
  _event: DaoPublicOwnershipTransferred;

  constructor(event: DaoPublicOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PublicVote extends ethereum.Event {
  get params(): PublicVote__Params {
    return new PublicVote__Params(this);
  }
}

export class PublicVote__Params {
  _event: PublicVote;

  constructor(event: PublicVote) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _NFT(): PublicVote_NFTStruct {
    return changetype<PublicVote_NFTStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class PublicVote_NFTStruct extends ethereum.Tuple {
  get uri(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get votes(): BigInt {
    return this[3].toBigInt();
  }

  get winTime(): BigInt {
    return this[4].toBigInt();
  }

  get votersCount(): BigInt {
    return this[5].toBigInt();
  }

  get favourVotes(): BigInt {
    return this[6].toBigInt();
  }

  get disApprovedVotes(): BigInt {
    return this[7].toBigInt();
  }

  get isApprovedByCommittee(): boolean {
    return this[8].toBoolean();
  }

  get winnerStatus(): boolean {
    return this[9].toBoolean();
  }

  get isBlackListed(): boolean {
    return this[10].toBoolean();
  }
}

export class Winner extends ethereum.Event {
  get params(): Winner__Params {
    return new Winner__Params(this);
  }
}

export class Winner__Params {
  _event: Winner;

  constructor(event: Winner) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _NFT(): Winner_NFTStruct {
    return changetype<Winner_NFTStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class Winner_NFTStruct extends ethereum.Tuple {
  get uri(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get votes(): BigInt {
    return this[3].toBigInt();
  }

  get winTime(): BigInt {
    return this[4].toBigInt();
  }

  get votersCount(): BigInt {
    return this[5].toBigInt();
  }

  get favourVotes(): BigInt {
    return this[6].toBigInt();
  }

  get disApprovedVotes(): BigInt {
    return this[7].toBigInt();
  }

  get isApprovedByCommittee(): boolean {
    return this[8].toBoolean();
  }

  get winnerStatus(): boolean {
    return this[9].toBoolean();
  }

  get isBlackListed(): boolean {
    return this[10].toBoolean();
  }
}

export class blackListed extends ethereum.Event {
  get params(): blackListed__Params {
    return new blackListed__Params(this);
  }
}

export class blackListed__Params {
  _event: blackListed;

  constructor(event: blackListed) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get decision(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get _NFT(): blackListed_NFTStruct {
    return changetype<blackListed_NFTStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class blackListed_NFTStruct extends ethereum.Tuple {
  get uri(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get votes(): BigInt {
    return this[3].toBigInt();
  }

  get winTime(): BigInt {
    return this[4].toBigInt();
  }

  get votersCount(): BigInt {
    return this[5].toBigInt();
  }

  get favourVotes(): BigInt {
    return this[6].toBigInt();
  }

  get disApprovedVotes(): BigInt {
    return this[7].toBigInt();
  }

  get isApprovedByCommittee(): boolean {
    return this[8].toBoolean();
  }

  get winnerStatus(): boolean {
    return this[9].toBoolean();
  }

  get isBlackListed(): boolean {
    return this[10].toBoolean();
  }
}

export class claimed extends ethereum.Event {
  get params(): claimed__Params {
    return new claimed__Params(this);
  }
}

export class claimed__Params {
  _event: claimed;

  constructor(event: claimed) {
    this._event = event;
  }

  get claimedBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get claimTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class voteForBlackList extends ethereum.Event {
  get params(): voteForBlackList__Params {
    return new voteForBlackList__Params(this);
  }
}

export class voteForBlackList__Params {
  _event: voteForBlackList;

  constructor(event: voteForBlackList) {
    this._event = event;
  }

  get committeeMember(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get decision(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get _NFT(): voteForBlackList_NFTStruct {
    return changetype<voteForBlackList_NFTStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class voteForBlackList_NFTStruct extends ethereum.Tuple {
  get uri(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get votes(): BigInt {
    return this[3].toBigInt();
  }

  get winTime(): BigInt {
    return this[4].toBigInt();
  }

  get votersCount(): BigInt {
    return this[5].toBigInt();
  }

  get favourVotes(): BigInt {
    return this[6].toBigInt();
  }

  get disApprovedVotes(): BigInt {
    return this[7].toBigInt();
  }

  get isApprovedByCommittee(): boolean {
    return this[8].toBoolean();
  }

  get winnerStatus(): boolean {
    return this[9].toBoolean();
  }

  get isBlackListed(): boolean {
    return this[10].toBoolean();
  }
}

export class DaoPublic__allNodesResult {
  value0: Array<BigInt>;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Array<BigInt>, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    return map;
  }

  getTokenIds(): Array<BigInt> {
    return this.value0;
  }

  getNext(): BigInt {
    return this.value1;
  }

  getPrev(): BigInt {
    return this.value2;
  }
}

export class DaoPublic__getPositionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getVotes(): BigInt {
    return this.value0;
  }

  getPosition(): BigInt {
    return this.value1;
  }
}

export class DaoPublic__getTotalAmountsResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class DaoPublic__nftInfooResult {
  value0: string;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;
  value9: boolean;
  value10: boolean;

  constructor(
    value0: string,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean,
    value9: boolean,
    value10: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    return map;
  }

  getUri(): string {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }

  getIndex(): BigInt {
    return this.value2;
  }

  getVotes(): BigInt {
    return this.value3;
  }

  getWinTime(): BigInt {
    return this.value4;
  }

  getVotersCount(): BigInt {
    return this.value5;
  }

  getFavourVotes(): BigInt {
    return this.value6;
  }

  getDisApprovedVotes(): BigInt {
    return this.value7;
  }

  getIsApprovedByCommittee(): boolean {
    return this.value8;
  }

  getWinnerStatus(): boolean {
    return this.value9;
  }

  getIsBlackListed(): boolean {
    return this.value10;
  }
}

export class DaoPublic extends ethereum.SmartContract {
  static bind(address: Address): DaoPublic {
    return new DaoPublic("DaoPublic", address);
  }

  FIXED_DURATION(): BigInt {
    let result = super.call("FIXED_DURATION", "FIXED_DURATION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FIXED_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FIXED_DURATION",
      "FIXED_DURATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  Xenoverse(): Address {
    let result = super.call("Xenoverse", "Xenoverse():(address)", []);

    return result[0].toAddress();
  }

  try_Xenoverse(): ethereum.CallResult<Address> {
    let result = super.tryCall("Xenoverse", "Xenoverse():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allNodes(votes: BigInt): DaoPublic__allNodesResult {
    let result = super.call(
      "allNodes",
      "allNodes(int256):(uint256[],int256,int256)",
      [ethereum.Value.fromSignedBigInt(votes)]
    );

    return new DaoPublic__allNodesResult(
      result[0].toBigIntArray(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_allNodes(votes: BigInt): ethereum.CallResult<DaoPublic__allNodesResult> {
    let result = super.tryCall(
      "allNodes",
      "allNodes(int256):(uint256[],int256,int256)",
      [ethereum.Value.fromSignedBigInt(votes)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DaoPublic__allNodesResult(
        value[0].toBigIntArray(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  allPositions(votes: BigInt, position: BigInt): BigInt {
    let result = super.call(
      "allPositions",
      "allPositions(int256,uint256):(uint256)",
      [
        ethereum.Value.fromSignedBigInt(votes),
        ethereum.Value.fromUnsignedBigInt(position)
      ]
    );

    return result[0].toBigInt();
  }

  try_allPositions(
    votes: BigInt,
    position: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allPositions",
      "allPositions(int256,uint256):(uint256)",
      [
        ethereum.Value.fromSignedBigInt(votes),
        ethereum.Value.fromUnsignedBigInt(position)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  daoCommittee(): Address {
    let result = super.call("daoCommittee", "daoCommittee():(address)", []);

    return result[0].toAddress();
  }

  try_daoCommittee(): ethereum.CallResult<Address> {
    let result = super.tryCall("daoCommittee", "daoCommittee():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPosition(param0: BigInt): DaoPublic__getPositionResult {
    let result = super.call(
      "getPosition",
      "getPosition(uint256):(int256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DaoPublic__getPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPosition(
    param0: BigInt
  ): ethereum.CallResult<DaoPublic__getPositionResult> {
    let result = super.tryCall(
      "getPosition",
      "getPosition(uint256):(int256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DaoPublic__getPositionResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getTotalAmounts(_address: Address): DaoPublic__getTotalAmountsResult {
    let result = super.call(
      "getTotalAmounts",
      "getTotalAmounts(address):(uint256,uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );

    return new DaoPublic__getTotalAmountsResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_getTotalAmounts(
    _address: Address
  ): ethereum.CallResult<DaoPublic__getTotalAmountsResult> {
    let result = super.tryCall(
      "getTotalAmounts",
      "getTotalAmounts(address):(uint256,uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DaoPublic__getTotalAmountsResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  isclaimed(param0: BigInt, param1: Address): boolean {
    let result = super.call("isclaimed", "isclaimed(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBoolean();
  }

  try_isclaimed(param0: BigInt, param1: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isclaimed",
      "isclaimed(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nftInfoo(param0: BigInt): DaoPublic__nftInfooResult {
    let result = super.call(
      "nftInfoo",
      "nftInfoo(uint256):(string,address,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DaoPublic__nftInfooResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean(),
      result[9].toBoolean(),
      result[10].toBoolean()
    );
  }

  try_nftInfoo(param0: BigInt): ethereum.CallResult<DaoPublic__nftInfooResult> {
    let result = super.tryCall(
      "nftInfoo",
      "nftInfoo(uint256):(string,address,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DaoPublic__nftInfooResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean(),
        value[9].toBoolean(),
        value[10].toBoolean()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  timer(): BigInt {
    let result = super.call("timer", "timer():(uint256)", []);

    return result[0].toBigInt();
  }

  try_timer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("timer", "timer():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  voteCheck(param0: BigInt, param1: Address): boolean {
    let result = super.call("voteCheck", "voteCheck(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBoolean();
  }

  try_voteCheck(param0: BigInt, param1: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "voteCheck",
      "voteCheck(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  winnersIndexes(param0: BigInt): BigInt {
    let result = super.call(
      "winnersIndexes",
      "winnersIndexes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_winnersIndexes(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "winnersIndexes",
      "winnersIndexes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddInfoCall extends ethereum.Call {
  get inputs(): AddInfoCall__Inputs {
    return new AddInfoCall__Inputs(this);
  }

  get outputs(): AddInfoCall__Outputs {
    return new AddInfoCall__Outputs(this);
  }
}

export class AddInfoCall__Inputs {
  _call: AddInfoCall;

  constructor(call: AddInfoCall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _isApprovedByCommittee(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class AddInfoCall__Outputs {
  _call: AddInfoCall;

  constructor(call: AddInfoCall) {
    this._call = call;
  }
}

export class AnnounceWinnerCall extends ethereum.Call {
  get inputs(): AnnounceWinnerCall__Inputs {
    return new AnnounceWinnerCall__Inputs(this);
  }

  get outputs(): AnnounceWinnerCall__Outputs {
    return new AnnounceWinnerCall__Outputs(this);
  }
}

export class AnnounceWinnerCall__Inputs {
  _call: AnnounceWinnerCall;

  constructor(call: AnnounceWinnerCall) {
    this._call = call;
  }
}

export class AnnounceWinnerCall__Outputs {
  _call: AnnounceWinnerCall;

  constructor(call: AnnounceWinnerCall) {
    this._call = call;
  }
}

export class BlackListArtCall extends ethereum.Call {
  get inputs(): BlackListArtCall__Inputs {
    return new BlackListArtCall__Inputs(this);
  }

  get outputs(): BlackListArtCall__Outputs {
    return new BlackListArtCall__Outputs(this);
  }
}

export class BlackListArtCall__Inputs {
  _call: BlackListArtCall;

  constructor(call: BlackListArtCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get decision(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class BlackListArtCall__Outputs {
  _call: BlackListArtCall;

  constructor(call: BlackListArtCall) {
    this._call = call;
  }
}

export class ClaimBatchCall extends ethereum.Call {
  get inputs(): ClaimBatchCall__Inputs {
    return new ClaimBatchCall__Inputs(this);
  }

  get outputs(): ClaimBatchCall__Outputs {
    return new ClaimBatchCall__Outputs(this);
  }
}

export class ClaimBatchCall__Inputs {
  _call: ClaimBatchCall;

  constructor(call: ClaimBatchCall) {
    this._call = call;
  }

  get indexes(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ClaimBatchCall__Outputs {
  _call: ClaimBatchCall;

  constructor(call: ClaimBatchCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _daoCommittee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _timer(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get FIXED_DURATION_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _xenoverse(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetTimerCall extends ethereum.Call {
  get inputs(): SetTimerCall__Inputs {
    return new SetTimerCall__Inputs(this);
  }

  get outputs(): SetTimerCall__Outputs {
    return new SetTimerCall__Outputs(this);
  }
}

export class SetTimerCall__Inputs {
  _call: SetTimerCall;

  constructor(call: SetTimerCall) {
    this._call = call;
  }

  get _FIXED_DURATION(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTimerCall__Outputs {
  _call: SetTimerCall;

  constructor(call: SetTimerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateDaoCommitteeAddressCall extends ethereum.Call {
  get inputs(): UpdateDaoCommitteeAddressCall__Inputs {
    return new UpdateDaoCommitteeAddressCall__Inputs(this);
  }

  get outputs(): UpdateDaoCommitteeAddressCall__Outputs {
    return new UpdateDaoCommitteeAddressCall__Outputs(this);
  }
}

export class UpdateDaoCommitteeAddressCall__Inputs {
  _call: UpdateDaoCommitteeAddressCall;

  constructor(call: UpdateDaoCommitteeAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateDaoCommitteeAddressCall__Outputs {
  _call: UpdateDaoCommitteeAddressCall;

  constructor(call: UpdateDaoCommitteeAddressCall) {
    this._call = call;
  }
}

export class VoteNftsCall extends ethereum.Call {
  get inputs(): VoteNftsCall__Inputs {
    return new VoteNftsCall__Inputs(this);
  }

  get outputs(): VoteNftsCall__Outputs {
    return new VoteNftsCall__Outputs(this);
  }
}

export class VoteNftsCall__Inputs {
  _call: VoteNftsCall;

  constructor(call: VoteNftsCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class VoteNftsCall__Outputs {
  _call: VoteNftsCall;

  constructor(call: VoteNftsCall) {
    this._call = call;
  }
}
